import logging
from typing import Optional, Dict
import requests
from config import config

logger = logging.getLogger(__name__)

class WeatherAPI:
    BASE_URL = "http://api.openweathermap.org/data/2.5/weather"
    
    @classmethod
    def get_weather(cls, city: str) -> Optional[Dict]:
       
        params = {
            "q": city,
            "appid": config.WEATHER_API_KEY,
            "units": "metric",
            "lang": "ru",
        }
        
        try:
            response = requests.get(cls.BASE_URL, params=params)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: {e}")
            return None
    
    @staticmethod
    def format_weather(data: Dict, city: str) -> str:
     
        try:
            temp = data["main"]["temp"]
            feels_like = data["main"]["feels_like"]
            description = data["weather"][0]["description"].capitalize()
            
            return (
                f"–ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                f"‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: {description}"
            )
        except (KeyError, TypeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"